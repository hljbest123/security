⚫加密算法主要有以下几种分类：

  1.为确保数据机密性算法：
    a) 对称加密算法(AES,DES)              //AES:Advanced(在前的,高级的) Encryption(加密） Standard（标准）
                                        //DES: Data  Encryption Standard
    b) 非对称加密算法（RSA，DSA）          //RSA: Rivest Shamirh Adleman
                                        //Digital Signature Algorithm
                                        
  2.为确保数据完整性算法：
    a) 信息摘要（MD5，SHA256，SHA512）
    
⚫检查文件的MD5校验和
  [root@proxy ~]# md5sum file?.txt                  //文件内容一致，则校验和也不变
    b92aa0f8aa5d5af5a47c6896283f3536  file1.txt
    b92aa0f8aa5d5af5a47c6896283f3536  file2.txt
    
⚫文件内容稍作改动，再次检查校验和，会发现校验和已大不相同 
  [root@proxy ~]# echo "x" >> file1.txt
  [root@proxy ~]# md5sum file?.txt
    6be3efe71d8b4b1ed34ac45f4edd2ba7  file1.txt
    b92aa0f8aa5d5af5a47c6896283f3536  file2.txt
    
⚫使用GPG对称加密方式保护文件
  GnuPG是非常流行的加密软件，支持所有常见加密算法，并且开源免费使用
  
  GnuPG官网 http://www.gnupg.org/

  [root@proxy ~]# yum -y install gnupg2            //安装软件
  [root@proxy ~]# gpg --version                    //查看版本
  gpg (GnuPG) 2.0.22
  
  支持算法:
    密钥:RSA,ELG,DSA
    对称加密:3DES,CAST5,BLOWFISH,AES,.....
    散列:MD5,SHA1,......
    
⚫对称加密
  加密操作:--symmetric(对称的) 选项 -c
  解密操作:--decrypt(解密)    选项 -d
      
  [root@proxyA ~]# gpg -c file2.txt
    根据提示依次输入两次密码即可。如果是在GNOME桌面环境，设置密码的交互界面会是弹出的窗口程序
    如果是在tty终端执行的上述加密操作，则提示界面也是文本方式的
  [root@proxyA ~]# cat file2.txt.gpg                    //查看加密数据为乱码
  ...
  [root@proxyB ~]# gpg -d file2.txt.gpg > file2.txt      //解密后保存
    gpg: 3DES 加密过的数据
  .. ..                                              //根据提示输入正确密码
  [root@proxyB ~]# cat file2.txt                      //查看解密后的文件
  
⚫非对称加密方式保护文件
  加密操作:--encrypt(加密） 选项 -e
  指定目标用户:--recipient(接受者) 选项 -r
  非对称加密/解密文件时，UserA（192.168.4.100）生成私钥与公钥，并把公钥发送给UserB（192.168.4.5），
  UserB使用公钥加密数据，并把加密后的数据传给UserA，UserA最后使用自己的私钥解密数据。
  
  生成公私钥
  [root@client ~]# gpg --gen-key                           //创建密钥对
  … …                                                       //根据交互式选项创建
                                        //需要大量的随即数 可以将/dev/random 换成 /dev/urandom
  
  UserA导出自己的公钥文件(在192.168.4.100操作)
  用户的公钥、私钥信息分别保存在pubring.gpg和secring.gpg文件内：
  [root@client ~]# gpg --list-keys                          //查看公钥环
   /root/.gnupg/pubring.gpg                                 //对称加密的算法也保存在这个隐藏文件夹
   ------------------------------
   pub   2048R/421C9354 2017-08-16
   uid                  UserA (User A) <UserA@tarena.com>
   sub   2048R/9FA3AD25 2017-08-16
   
  使用gpg命令结合--export选项将其中的公钥文本导出
  [root@client ~]# gpg -a --export UserA > UserA.pub
                                    //--export的作用是导出密钥，-a的作用是导出的密钥存储为ASCII格式
  [root@client ~]# scp UserA.pub 192.168.4.5:/tmp/ 
                                        //将密钥传给Proxy

  UserB导入接收的公钥信息
  [root@proxy ~]# gpg --import /tmp/UserA.pub
    gpg: 密钥 421C9354：公钥“UserA (UserA) <UserA@tarena.com>”已导入
    gpg: 合计被处理的数量：1
    gpg:           已导入：1  (RSA: 1) 
    
  UserB使用公钥加密数据，并把加密后的数据传给UserA  
  [root@proxy ~]# echo "I love you ." > love.txt
  [root@proxy ~]# gpg -e -r UserA love.txt                    //encrypt加密 recipient接受者 -指定导入公钥用户
    无论如何还是使用这把密钥吗？(y/N)y                          //确认使用此密钥加密文件
    //-e选项是使用密钥加密数据
    //-r选项后面跟的是密钥，说明使用哪个密钥对文件加密
  [root@proxy ~]# scp love.txt.gpg  192.168.4.100:/root    //加密的数据传给UserA
  
  UserA以自己的私钥解密文件
  [root@client ~]# gpg -d love.txt.gpg > love.txt
    您需要输入密码，才能解开这个用户的私钥：“UserA (UserA) <UserA@tarena.com>”
    2048 位的 RSA 密钥，钥匙号 9FA3AD25，建立于 2017-08-16 (主钥匙号 421C9354)
                                                  //验证私钥口令
    gpg: 由 2048 位的 RSA 密钥加密，钥匙号为 9FA3AD25、生成于 2017-08-16
      “UserA (UserA) <UserA@tarena.com>”
  [root@client ~]# cat love.txt                      //获得解密后的文件内容
  
⚫使用GPG的签名机制，检查数据来源的正确性
  使用私钥签名的文件，是可以使用对应的公钥验证签名的，只要验证成功，则说明这个文件一定是出自对应的私钥签名，
  除非私钥被盗，否则一定能证明这个文件来自于某个人！
    分离式签名: --detach(分离)-sign  选项 -b
    验证签名: --verify(校验)
    
  [root@client ~]# gpg -b log.tar                      //创建分离式数字签名,密钥沿用上一案例
  [root@client ~]# ls -lh log.tar*
  -rw-rw-r--. 1 root root 170 8月  17 21:18 log.tar
  -rw-rw-r--. 1 root root 287 8月  17 21:22 log.tar.sig
  [root@client ~]# scp log.tar* 192.168.4.5:/root        //将签名文件与签名传给UserB
  [root@proxy ~]# gpg --verify log.tar.sig log.tar
  gpg:于2028年06月07日 星期六 23时23分23秒 CST 创建的签名，使用 RSA，钥匙号 421C9354
  gpg: 完好的签名，来自于“UserA (UserA) <UserA@tarena.com>”
  .. ..                          
  
⚫使用AIDE做入侵检测  
  Aide通过检查数据文件的权限、时间、大小、哈希值等，校验数据的完整性
  使用Aide需要在数据没有被破坏前，对数据完成初始化校验，生成校验数据库文件，在被攻击后，可以使用数据库文件，快速定位被人篡改的文件

  装包
  [root@proxy ~]# yum -y install aide

  修改配置文件
  确定对哪些数据进行校验，如何校验数据
    [root@proxy ~]# vim /etc/aide.conf
    @@define DBDIR /var/lib/aide                            //数据库目录
    @@define LOGDIR /var/log/aide                           //日志目录
    database=file:@@{DBDIR}/aide.db.gz                       
                           //每次比对是用新的aide.db.new.gz与上一次的aide.db.gz(名字用上一次文件修改)
    database_out=file:@@{DBDIR}/aide.db.new.gz                //数据库文件名
    //一下内容为可以检查的项目（权限，用户，组，大小，哈希值等）
    #p:      permissions
    #i:      inode:
    #n:      number of links
    #u:      user
    #g:      group
    #s:      size
    #md5:    md5 checksum
    #sha1:   sha1 checksum
    #sha256:        sha256 checksum
    DATAONLY(套餐名称) =  p+n+u+g+s+acl+selinux+xattrs+sha256
    //以下内容设置需要对哪些数据进行入侵校验检查
    //注意：为了校验的效率，这里将所有默认的校验目录与文件都注释
    //仅保留/root目录，其他目录都注释掉
    /root   DATAONLY
    #/boot   NORMAL                                    //对哪些目录进行什么校验
    #/bin    NORMAL
    #/sbin   NORMAL
    #/lib    NORMAL
    #/lib64  NORMAL
    #/opt    NORMAL
    #/usr    NORMAL
    #!/usr/src                                        //使用[!]，设置不校验的目录
    #!/usr/tmp
    
  生成初始化数据库
    [root@proxy ~]# aide --init
    AIDE, version 0.15.1
    AIDE database at /var/lib/aide/aide.db.new.gz initialized.
    //生成校验数据库，数据保存在/var/lib/aide/aide.db.new.gz
    
  备份数据库，将数据库文件拷贝 
    [root@proxy ~]# mv /var/lib/aide/aide.db.new.gz   /media/
  
  备份前还原备份数据
    [root@proxy ~]# cp /media/aide/aide.db.new.gz   /var/lib/aide/aide.db.gz
  
  执行检测
    [root@proxy ~]# aide --check                            //检查哪些数据发生了变化
  
⚫扫描与抓包分析 
  使用NMAP扫描来获取指定主机/网段的相关信息
    [root@proxy ~]# yum -y install nmap
    //基本用法：
    # nmap  [扫描类型]  [选项]  <扫描目标 ...>                   //nmap --help
    //常用的扫描类型
    // -sS，TCP SYN扫描（半开）
    // -sT，TCP 连接扫描（全开）
    // -sU，UDP扫描
    // -sP，ICMP扫描
    // -A，目标系统全面分析
   
  检查192.168.4.100主机是否可以ping通
    [root@proxy ~]# nmap  -sP  192.168.4.100
    Starting Nmap 6.40 ( http://nmap.org ) at 2018-06-06 21:59 CST
    mass_dns: warning: Unable to determine any DNS servers. Reverse DNS is disabled. 
    Try using --system-dns or specify valid servers with --dns-servers
    Nmap scan report for host3 (192.168.4.100)
    Host is up (0.00036s latency).
    MAC Address: 52:54:00:71:07:76 (QEMU Virtual NIC)
    Nmap done: 1 IP address (1 host up) scanned in 0.02 seconds
    
  使用-n选项可以不执行DNS解析
    [root@proxy ~]# nmap -n -sP  192.168.4.100
    
  检查192.168.4.0/24网段内哪些主机可以ping通
    [root@proxy ~]# nmap  -n  -sP  192.168.4.0/24
      Starting Nmap 5.51 ( http://nmap.org ) at 2017-05-17 18:01 CST
      Nmap scan report for 192.168.4.1
      Host is up.
      Nmap scan report for 192.168.4.7
      Host is up.
      Nmap scan report for 192.168.4.120
      Host is up (0.00027s latency).
      MAC Address: 00:0C:29:74:BE:21 (VMware)
      Nmap scan report for 192.168.4.110
      Host is up (0.00016s latency).

  检查目标主机所开启的TCP服务
    [root@proxy ~]# nmap -sT 192.168.4.100
      Starting Nmap 5.51 ( http://nmap.org ) at 2018-05-17 17:55 CST
      Nmap scan report for 192.168.4.100
      Host is up (0.00028s latency).
      Not shown: 990 closed ports
      PORT    STATE SERVICE
      21/tcp  open  ftp
      22/tcp  open  ssh
      
  检查192.168.4.0/24网段内哪些主机开启了FTP、SSH服务
    [root@proxy ~]# nmap -p 21-22 192.168.4.0/24                    //-p port
    Starting Nmap 5.51 ( http://nmap.org ) at 2017-05-17 18:00 CST
    Nmap scan report for 192.168.4.1
    Host is up (0.000025s latency).
    PORT   STATE SERVICE
    21/tcp open  ftp
    22/tcp open  ssh
    
  检查目标主机所开启的UDP服务
    [root@proxy ~]# nmap   -sU  192.168.4.100                //指定-sU扫描UDP
    53/udp   open          domain
    111/udp  open          rpcbind
    
  全面分析目标主机192.168.4.100和192.168.4.5的操作系统信息
    Starting Nmap 5.51 ( http://nmap.org ) at 2017-05-17 18:03 CST
    Nmap scan report for 192.168.4.100                      //主机mail的扫描报告
    
⚫使用tcpdump分析FTP访问中的明文交换信息
  启用tcpdump命令行抓包,执行tcpdump命令行，添加适当的过滤条件
  只抓取访问主机192.168.4.5的21端口的数据通信 ，并转换为ASCII码格式的易读文本
  这里假设，192.168.4.5主机有vsftpd服务，如果没有需要提前安装并启动服务！！！
    [root@proxy ~]# tcpdump -A host 192.168.4.5 and tcp port 21
    tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
    listening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes
    .. ..                                            //进入等待捕获数据包的状态
    //监控选项如下：
    // -i，指定监控的网络接口（默认监听第一个网卡）
    // -A，转换为 ACSII 码，以方便阅读
    // -w，将数据包信息保存到指定文件
    // -r，从指定文件读取数据包信息
    //tcpdump的过滤条件：
    // 类型：host、net、port、portrange
    // 方向：src(源地址)、dst（目标地址）
    // 协议：tcp、udp、ip、wlan、arp、……
    // 多个条件组合：and、or、not （与/或/非）
  
  观察抓包的结果
    [root@proxy ~]#
    ... …
    18:47:27.960530 IP 192.168.4.100.novation > 192.168.4.5.ftp: Flags [P.], seq 1:14, ack 21, win 65515, length 13
    E..5..@.@......x...d.*..G.\c.1BvP.......USER tom
    18:47:29.657364 IP 192.168.4.100.novation > 192.168.4.5.ftp: Flags [P.], seq 14:27, ack 55, win 65481, length 13
    E..5..@.@......x...d.*..G.\p.1B.P.......PASS 123
  
  再次使用tcpdump抓包，使用-w选项可以将抓取的数据包另存为文件
    [root@proxy ~]# tcpdump  -A  -w  ftp.cap（文件必须是.cap） host 192.168.4.5  and  tcp  port  21            //抓包并保存
    
  tcpdump命令的-r选项，可以去读之前抓取的历史数据文件
    [root@proxy ~]# tcpdump  -A  -r  ftp.cap | egrep  '(USER|PASS)'    //分析数据包
    
  使用tcpdump命令抓包 
    [root@proxy ~]# tcpdump  -A  host 192.168.4.5  and  tcp  port  80
  真实机使用浏览器访问
    [root@pc001 ~]# firefox  http://192.168.4.5         //根据提示输入用户名与密码
  回到proxy查看抓包的数据结果
    [root@proxy ~]# tcpdump -A host 192.168.4.5 and tcp port 80
    tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
    listening on eth0, link-type EN10MB (Ethernet), capture size 262144 bytes
    … …
    Authorization: Basic dG9tOjEyMzQ1Ng==
    … …
  查看base64编码内容
    [root@proxy ~]# echo "dG9tOjEyMzQ1Ng==" | base64 -d
    tom:123456
    [root@proxy ~]# echo "tom:123456" | base64 
    dG9tOjEyMzQ1Ngo=
    
  抓取pop3服务
    [root@proxy ~]# tcpdump -i lo(网卡端口）-A（可阅读的方式） tcp port 110
    
⚫安装WireShark
  官网:www.wireshark.org
  rhel光盘中俩个包
  -wireshark
  -wireshark-gnome
 
  图形界面
可以打开tcpdump抓取的.cap的文件
